<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
    body {
            margin-left: 13%;
            margin-right: 13%;
            margin-top: 7%;
            text-align: center;
            font-family: 'Roboto', sans-serif;
            
        }
        .flex-container {
            display: flex;
        }
        #button-container {
            justify-content: center;
            flex-direction: column;
            width: 80%;
        }
        #larger-container {
            justify-content: center;
        }
        button, input[type=button], input[type=submit], input[type=reset] {
            border: none;
            padding: 5px 10px;
            font-size: 20px;
            text-decoration: none;
            margin: 15px 2px;
            cursor: pointer;
            margin-left: 10%;
            margin-right: 10%;
        }
        #prompt {
            text-decoration: underline;
        }
    </style>

</head>
<body>
    <h1 id="prompt">Which of the choices occurs first in the story?</h1>
    <div class="flex-container" id="larger-container">
        
        <div class="flex-container" id="button-container">
            <button>What is the purpose of the first person perspective used in the story?</button>
            <button>Why is so much of the story focused on the past?</button>
            <button>How does the state of the narrator's external environment reflect their internal environment? Consider how the narrator considers his own mental state (“I often want to tell Nkiru that her mother visits weekly… but if I do, she will finally have reason to come here and bundle me back with her to America”), and how all of the characters consider the state of their country.
            </button>
        </div>
    </div>
</body>
<script>
    getName();

    var score = 0;
    var curQ = 0;

    var questions = [
        [
            {text: "Introduced to the main character, a babysitter", action:"scoped.nextQuestion();"},
            {text: "Introduced to main character, an old math professor", action:"scoped.score++;scoped.nextQuestion();"},
            {text: "Introduced to the main character, Casper the friendly ghost", action:"scoped.nextQuestion();"}
        ],
        [
            {text: "Narrator talks to some clerks and learns his pension has been stolen", action:"scoped.score++;scoped.nextQuestion();"},
            {text: "A young student confronts the narrator about his teaching style", action:"scoped.nextQuestion();"},
            {text: "The narrator walks into an old friend he thought was dead", action:"scoped.nextQuestion();"}
        ],
        [
            {text: "The narrator finds a note from his long-lost daughter", action:"scoped.nextQuestion();"},
            {text: "The narrator is bitten by a radioactive spider", action:"scoped.nextQuestion();"},
            {text: "The narrator catches up with an old friend he thought was dead", action:"scoped.score++;scoped.nextQuestion();"}
        ],
        [
            {text: "The narrator talks about how his living wife still visits him", action:"scoped.nextQuestion();"},
            {text: "The narrator talks about how his dead wife still visits him", action:"scoped.score++;scoped.nextQuestion();"},
            {text: "The narrator talks about how his son recently joined a cult and was put into cell one", action:"scoped.nextQuestion();"}
        ],
        [
            {text: "The narrator begins writing a story", action:"scoped.sendScore();"},
            {text: "The narrator recalls some parts of his past", action:"scoped.score++;scoped.sendScore();"},
            {text: "The narrator wakes up", action:"scoped.sendScore();"}
        ]

    ];
    function nextQuestion(){
        scoped.loadQuestion(++scoped.curQ);
    }
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
            c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function sendScore(){
        ws.send(JSON.stringify({type:"score", content: scoped.score, user: getCookie("username")}));
        document.body.innerHTML = "<h1 id='prompt'>Your score: "+scoped.score+"</h1>";
    }

    function loadQuestion(n){
        document.getElementById("button-container").innerHTML = "";
        for(let i of scoped.questions[n]){
            document.getElementById("button-container").innerHTML += scoped.makeButton(i.text, i.action);
        }
    }

    function loadQuestionNormal(n){
        document.getElementById("button-container").innerHTML = "";
        for(let i of questions[n]){
            document.getElementById("button-container").innerHTML += makeButton(i.text, i.action);
        }
    }

    function makeButton(t, a){
        return `<button onclick='${a}'>${t}</button>`;
    }

    loadQuestionNormal(0);
</script>
</html>